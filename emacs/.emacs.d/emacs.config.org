#+title: Emacs org
#+DATE: <2018-12-05 Wed>
#+AUTHOR: Sunil
#+EMAIL: sunhick@gmail.com
#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+OPTIONS: author:t c:nil creator:comment d:(not "LOGBOOK") date:t
#+OPTIONS: e:t email:nil f:t inline:t num:t p:nil pri:nil stat:t
#+OPTIONS: tags:t tasks:t tex:t timestamp:t toc:t todo:t |:t
#+CREATOR: Emacs 25.3.1 (Org mode 8.2.10)
#+DESCRIPTION: Emacs init.el alternative using org mode
#+EXCLUDE_TAGS: noexport
#+KEYWORDS: Emacs config file
#+LANGUAGE: en
#+SELECT_TAGS: export
#+STARTUP: showeverything

* Base configurations
** use-package
   #+BEGIN_SRC emacs-lisp
     (dolist (package '(use-package))
       (unless (package-installed-p package)
         (package-refresh-contents)
         (package-install package)))
   #+END_SRC
** UI customization
   #+BEGIN_SRC emacs-lisp
     (setq gc-cons-threshold 20000000)

     ;; Emacs title bar customizations
     (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
     (add-to-list 'default-frame-alist '(ns-appearance . dark))

     ;; remove all alarms from emacs
     (setq ring-bell-function 'ignore)

     (setq ns-use-proxy-icon nil)
     (setq frame-title-format nil)
     (setq frame-resize-pixelwise t)

     ;; Emacs font and themes
     (set-default-font "Menlo:pixelsize=12")

     (use-package zenburn-theme
       :ensure t
       :init
       (load-theme 'zenburn 'no-confirm))

     ;; Get rid of tool bar and menu bar
     (menu-bar-mode 0)

     ;; Yeah, I'm keeping the text menu at the top. It doesn't
     ;; bother me. Whereas the toolbar i never use it and just
     ;; occupies space.
     (tool-bar-mode 0)
     (scroll-bar-mode 0)

     ;; I hate typing. Especially when emacs prompts
     ;; me with yes/no and i type 'y' or 'n' in a hurry
     ;; remap yes/no to y/n
     (fset 'yes-or-no-p 'y-or-n-p)

     ;; Enable visual line mode
     (global-visual-line-mode 1)

     ;; change the fringe
     (set-fringe-mode '(nil . 0))

     ;; Trash can support
     (setq delete-by-moving-to-trash t)

     ;; 80 chars is a good width.
     (set-default 'fill-column 80)

     ;; Display line & column numbers
     (setq line-number-mode t)
     (setq column-number-mode t)

     ;; use whitespaces instead of tabs
     (setq-default indent-tabs-mode nil)
     (add-hook 'before-save-hook 'delete-trailing-whitespace)

     ;; Show empty lines indicator
     (set-default 'indicate-empty-lines t)
   #+END_SRC
** org mode
   #+BEGIN_SRC emacs-lisp
     (use-package org
       :ensure t)
     (use-package org-bullets
       :ensure t
       :init
       (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
   #+END_SRC
** Buffers
   #+BEGIN_SRC emacs-lisp
     (defalias 'list-buffers 'ibuffer)
   #+END_SRC
** AutoPair
   #+BEGIN_SRC emacs-lisp
     (use-package smartparens
       :ensure t
       :demand t
       :bind* (("M-m m j" . sp-down-sexp)
               ("M-m m k" . sp-backward-up-sexp)
               ("M-m m h" . sp-backward-down-sexp)
               ("M-m m l" . sp-up-sexp)
               ("M-m m f" . sp-forward-sexp)
               ("M-m m b" . sp-backward-sexp)
               ("M-m m a" . sp-beginning-of-sexp)
               ("M-m m e" . sp-end-of-sexp)
               ("M-m m n" . sp-next-sexp)
               ("M-m m p" . sp-previous-sexp)
               ("M-m m >" . sp-forward-barf-sexp)
               ("M-m m <" . sp-backward-barf-sexp)
               ("M-m m )" . sp-forward-slurp-sexp)
               ("M-m m (" . sp-backward-slurp-sexp)
               ("M-m m x" . sp-transpose-sexp)
               ("M-m m d" . sp-kill-sexp)
               ("M-m m y" . sp-copy-sexp)
               ("M-m m u" . sp-unwrap-sexp)
               ("M-m m U" . sp-backward-unwrap-sexp)
               ("M-m m C" . sp-convolute-sexp)
               ("M-m m r" . sp-raise-sexp)
               ("M-m m s" . sp-split-sexp)
               ("M-m m R" . sp-rewrap-sexp)
               ("M-m m S" . sp-splice-sexp)
               ("M-m m F" . sp-splice-sexp-killing-forward)
               ("M-m m B" . sp-splice-sexp-killing-backward)
               ("M-m m A" . sp-splice-sexp-killing-around))
       :diminish smartparens-mode
       :diminish smartparens-strict-mode
       :config
       (require 'smartparens-config)
       (smartparens-global-mode))
   #+END_SRC
** Relative line numbers
   #+BEGIN_SRC emacs-lisp
     ;; Works only with emacs >= 26
     ;; use native relative line numbering(faster than linum-relative package)
     ;; Builtin package also fixes the issues with code folding.
     (global-display-line-numbers-mode)
     (setq-default display-line-numbers-type 'visual
                   display-line-numbers-current-absolute nil)
   #+END_SRC
** fzf
   #+BEGIN_SRC emacs-lisp
     ;; fzf emacs key bindings
     (use-package fzf
       :ensure t
       :bind (("C-c f f" . fzf-git-files)
              ("C-c f g" . fzf-git)
              ("C-c f d" . fzf-directory)
              ("C-c f s" . fzf-git-grep)
              ("C-c f p" . fzf-projectile)))
   #+END_SRC
** Kill ring
   #+BEGIN_SRC emacs-lisp
     (load "~/.emacs.d/vendor/browse-kill-ring/browse-kill-ring")
     (require 'browse-kill-ring)
     (global-set-key (kbd "M-y") 'browse-kill-ring)
   #+END_SRC
** Smooth scroll
   #+BEGIN_SRC emacs-lisp
     ;; Don't make new frames when opening a new file with Emacs
     (setq ns-pop-up-frames nil)

     (use-package smooth-scrolling
       :ensure t
       :config
       (smooth-scrolling-mode))

   #+END_SRC
** Multiple cursors
   #+BEGIN_SRC emacs-lisp
     (use-package multiple-cursors
       :ensure t
       :bind (("C->" . mc/mark-next-like-this)
              ("C-<" . mc/mark-previous-like-this)
              ("C-c C-<" . mc/mark-all-like-this)))
   #+END_SRC
** Text jumping
   #+BEGIN_SRC emacs-lisp
     (use-package avy
       :ensure t
       :bind (("C-:" . avy-goto-char)
              ("M-g l" . avy-goto-line)
              ("M-g w" . avy-goto-word-1)))
   #+END_SRC
** Backups
   #+BEGIN_SRC emacs-lisp
     ;; Backups at .saves folder in the current folder
     (setq backup-by-copying t      ; don't clobber symlinks
           backup-directory-alist
           '(("." . "~/.saves"))
           delete-old-versions t
           kept-new-versions 6
           kept-old-versions 2
           version-control t)       ; use versioned backups
   #+END_SRC
** Diminish
   #+BEGIN_SRC emacs-lisp
     (use-package diminish
       :ensure t)

     (diminish 'visual-line-mode)
     (eval-after-load "autopair" '(diminish 'autopair-mode))
     (eval-after-load "eldoc" '(diminish 'eldoc-mode))
   #+END_SRC
** Flx & Ido
   #+BEGIN_SRC emacs-lisp
     (use-package ido
       :config
       (setq ido-enable-flex-matching t)
       (setq ido-use-faces nil)
       (ido-everywhere t)
       (ido-mode 1))

     (use-package flx-ido
       :ensure t
       :init
       (ido-mode 1)
       (ido-everywhere 1)
       (flx-ido-mode 1)
       ;; disable ido faces to see flx highlights.
       (setq ido-enable-flex-matching t)
       (setq ido-use-faces nil))

     (use-package ido-vertical-mode
       :ensure t
       :init
       (ido-mode 1)
       (ido-vertical-mode 1)
       (setq ido-vertical-define-keys 'C-n-and-C-p-only))

     (use-package ido-completing-read+
       :ensure t
       :init
       (ido-ubiquitous-mode 1))
   #+END_SRC
** smex
   #+BEGIN_SRC emacs-lisp
     (use-package smex
       :ensure t
       :bind (("M-x" . smex)
              ("M-X" . smex-major-mode-commands))
       :config
       (progn
         (smex-initialize)))
   #+END_SRC
** Magit
   #+BEGIN_SRC emacs-lisp
     (use-package magit
       :ensure t
       :config
       (global-set-key(kbd "C-x g") 'magit-status))
   #+END_SRC
** Guide key
   #+BEGIN_SRC emacs-lisp
     (use-package guide-key
       :ensure t
       :init
       (setq guide-key/guide-key-sequence '("C-x r" "C-x 4" "C-x v" "C-x 8" "C-x +" "M-m m"))
       (guide-key-mode 1)
       (setq guide-key/recursive-key-sequence-flag t)
       (setq guide-key/popup-window-position 'bottom))
     (diminish 'guide-key-mode)
   #+END_SRC
** Save Place
   #+BEGIN_SRC emacs-lisp
     (save-place-mode 1)
   #+END_SRC
** Config file (this file)
   #+BEGIN_SRC emacs-lisp
     (defun find-user-init-file ()
       (interactive)
       (find-file-other-window "~/.emacs.d/emacs.config.org"))

     (global-set-key (kbd "C-c I") #'find-user-init-file)
   #+END_SRC
** Re-builder
   #+BEGIN_SRC emacs-lisp
     ;; I don't want to deal with extra backslashes
     ;; while building building regex
     (require 're-builder)
     (setq reb-re-syntax 'string)
   #+END_SRC
* Window Management
** switch window
   #+BEGIN_SRC emacs-lisp
     ;; switch window configuration
     (use-package switch-window
       :ensure t
       :bind ("C-x w" . switch-window))
   #+END_SRC
** Sessions
   #+BEGIN_SRC emacs-lisp
     (use-package eyebrowse
       :ensure t
       :init
       (eyebrowse-mode t))
   #+END_SRC
* Programming configurations
** customizations
   #+BEGIN_SRC emacs-lisp
     ;; electric indentation mode
     (electric-indent-mode 1)
   #+END_SRC
** Navigation
   #+BEGIN_SRC emacs-lisp
     (use-package smart-jump
       :ensure t
       :config
       (smart-jump-setup-default-registers))

     (smart-jump-register :modes '(c-mode c++-mode)
                          :jump-fn 'ggtags-find-tag-dwim
                          :pop-fn 'ggtags-prev-mark
                          :refs-fn 'ggtags-find-reference
                          :should-jump t
                          :heuristic 'point
                          :async 500
                          :order 2)

     (smart-jump-register :modes '(c-mode c++-mode)
                          :jump-fn 'rtags-find-symbol-at-point
                          :pop-fn 'rtags-location-stack-back
                          :refs-fn 'rtags-find-all-references-at-point
                          :should-jump (lambda ()
                                         (and
                                          (fboundp 'rtags-executable-find)
                                          (rtags-executable-find "rc")
                                          (rtags-is-indexed)))
                          :heuristic 'point
                          :async 500
                          :order 1)
   #+END_SRC
** Completions
   #+BEGIN_SRC emacs-lisp
     (use-package auto-complete
       :ensure t
       :pin melpa)
     (use-package auto-complete-c-headers
       :ensure t
       :config
       (ac-config-default))
     (use-package auto-complete-clang
       :ensure t
       :pin melpa)
   #+END_SRC
** Useful Modes
   #+BEGIN_SRC emacs-lisp
     (use-package yaml-mode :ensure t)
     (use-package gitignore-mode :ensure t)
     (use-package protobuf-mode :ensure t)
     (use-package groovy-mode :ensure t)
     (use-package cmake-mode :ensure t)
     (use-package markdown-mode
       :ensure t
       :commands (markdown-mode gfm-mode)
       :mode (("README\\.md\\'" . gfm-mode)
              ("\\.md\\'" . markdown-mode)
              ("\\.markdown\\'" . markdown-mode))
       :init (setq markdown-command "multimarkdown"))
   #+END_SRC
** Expand region
   #+BEGIN_SRC emacs-lisp
     (use-package expand-region
       :ensure t
       :bind (("C-=" . er/expand-region)))
   #+END_SRC
