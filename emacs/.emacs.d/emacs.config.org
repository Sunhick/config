#+title: Emacs org
#+DATE: <2018-12-05 Wed>
#+AUTHOR: Sunil
#+EMAIL: sunhick@gmail.com
#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+OPTIONS: author:t c:nil creator:comment d:(not "LOGBOOK") date:t
#+OPTIONS: e:t email:nil f:t inline:t num:t p:nil pri:nil stat:t
#+OPTIONS: tags:t tasks:t tex:t timestamp:t toc:t todo:t |:t
#+CREATOR: Emacs 25.3.1 (Org mode 8.2.10)
#+DESCRIPTION: Emacs init.el alternative using org mode
#+EXCLUDE_TAGS: noexport
#+KEYWORDS: Emacs config file
#+LANGUAGE: en
#+SELECT_TAGS: export
#+STARTUP: showeverything

* Base configurations
** use-package
   #+BEGIN_SRC emacs-lisp
     (dolist (package '(use-package))
       (unless (package-installed-p package)
         (package-refresh-contents)
         (package-install package)))
   #+END_SRC
** UI customization
   #+BEGIN_SRC emacs-lisp
     ;; Emacs title bar customizations
     (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
     (add-to-list 'default-frame-alist '(ns-appearance . dark))

     (setq ns-use-proxy-icon nil)
     (setq frame-title-format nil)
     (setq frame-resize-pixelwise t)

     ;; Emacs font and themes
     (set-default-font "Hack:pixelsize=12")

     ;; (use-package twilight-theme
     ;;   :ensure t
     ;;   :init
     ;;   (load-theme 'twilight 'no-confirm))

     (use-package zenburn-theme
       :ensure t
       :init
       (load-theme 'zenburn 'no-confirm))

     ;; Get rid of tool bar and menu bar
     (menu-bar-mode 0)

     ;; Yeah, I'm keeping the text menu at the top. It doesn't
     ;; bother me. Whereas the toolbar i never use it and just
     ;; occupies space.
     (tool-bar-mode 0)
     (scroll-bar-mode 0)

     ;; I hate typing. Especially when emacs prompts
     ;; me with yes/no and i type 'y' or 'n' in a hurry
     ;; remap yes/no to y/n
     (fset 'yes-or-no-p 'y-or-n-p)

     ;; Enable visual line mode
     (global-visual-line-mode 1)

     ;; change the fringe
     (set-fringe-mode '(nil . 0))

     ;; Trash can support
     (setq delete-by-moving-to-trash t)

     ;; 80 chars is a good width.
     (set-default 'fill-column 80)

     ;; Display line & column numbers
     (setq line-number-mode t)
     (setq column-number-mode t)

     ;; use whitespaces instead of tabs
     (setq-default indent-tabs-mode nil)
     (add-hook 'before-save-hook 'delete-trailing-whitespace)

     ;; Show empty lines indicator
     (set-default 'indicate-empty-lines t)
   #+END_SRC
** org mode
   #+BEGIN_SRC emacs-lisp
     (use-package org
       :ensure t)
     (use-package org-bullets
       :ensure t
       :init
       (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
   #+END_SRC
** Buffers
   #+BEGIN_SRC emacs-lisp
     (defalias 'list-buffers 'ibuffer)
   #+END_SRC
** Magit
   #+BEGIN_SRC emacs-lisp
     (use-package magit
       :ensure t
       :config
       (global-set-key(kbd "C-x g") 'magit-status)
       ;; set the magit repository
       (setq magit-repository-directories '( "~/prv/github/")))
   #+END_SRC
** Which key
   #+BEGIN_SRC emacs-lisp
     ;; configure which key for help on key strokes
     (use-package which-key
       :ensure t
       :config
       (which-key-mode))
   #+END_SRC
** ParEdit
   #+BEGIN_SRC emacs-lisp
     (use-package paredit
       :ensure t
       :config
       (add-hook 'prog-mode-hook #'paredit-mode))
   #+END_SRC
** Counsel & swiper
   #+BEGIN_SRC emacs-lisp
     (use-package counsel
       :ensure t
       :bind (("M-x" . counsel-M-x)
              ("C-x C-f" . counsel-find-file)))

     (use-package swiper
       :ensure t
       :bind ("C-s" . swiper))

     (use-package flx
       :ensure t)

     (use-package ivy
       :ensure t
       :init
       ;; Enable fuzzy search in swiper. You can disable fuzzy
       ;; in swiper by M-r (toggle between fuzzy and complete match)
       (setq ivy-re-builders-alist
             '((swiper . ivy--regex-fuzzy)
               (t . ivy--regex-fuzzy)))
       (ivy-mode 1)

       (setq ivy-use-virtual-buffers t)
       (setq enable-recursive-minibuffers t))
   #+END_SRC
** Relative line numbers
   #+BEGIN_SRC emacs-lisp
     ;;; use native relative line numbering(faster than linum-relative package)
     ;;; Builtin package also fixes the issues with code folding.
     (setq display-line-numbers 'visual)
   #+END_SRC
** fzf
   #+BEGIN_SRC emacs-lisp
     ;; fzf emacs key bindings
     (use-package fzf
       :ensure t
       :bind (("C-c f f" . fzf-git-files)
              ("C-c f g" . fzf-git)
              ("C-c f d" . fzf-directory)
              ("C-c f s" . fzf-git-grep)
              ("C-c f p" . fzf-projectile)))
   #+END_SRC
** Kill ring
   #+BEGIN_SRC emacs-lisp
     (load "~/.emacs.d/vendor/browse-kill-ring/browse-kill-ring")
     (require 'browse-kill-ring)
     (global-set-key (kbd "M-y") 'browse-kill-ring)
   #+END_SRC
** Smooth scroll
   #+BEGIN_SRC emacs-lisp
     ;; Don't make new frames when opening a new file with Emacs
     (setq ns-pop-up-frames nil)

     (use-package smooth-scrolling
       :ensure t
       :config
       (smooth-scrolling-mode))

   #+END_SRC
** Multiple cursors
   #+BEGIN_SRC emacs-lisp
     (use-package multiple-cursors
       :ensure t
       :bind (("C->" . mc/mark-next-like-this)
              ("C-<" . mc/mark-previous-like-this)
              ("C-c C-<" . mc/mark-all-like-this)))
   #+END_SRC
** Unclutter Modeline
   #+BEGIN_SRC emacs-lisp
     (use-package diminish
       :ensure t
       :config
       (diminish 'projectile-mode)
       (diminish 'abbrev-mode)
       (diminish 'ivy-mode)
       (diminish 'visual-line-mode)
       (diminish 'auto-revert-mode)
       (diminish 'autopair-mode))
   #+END_SRC
** Text jumping
   #+BEGIN_SRC emacs-lisp
     (use-package avy
       :ensure t
       :bind (("C-:" . avy-goto-char)
              ("M-g l" . avy-goto-line)
              ("M-g w" . avy-goto-word-1)))
   #+END_SRC
** Backups
   #+BEGIN_SRC emacs-lisp
     ;; Backups at .saves folder in the current folder
     (setq backup-by-copying t      ; don't clobber symlinks
           backup-directory-alist
           '(("." . "~/.saves"))
           delete-old-versions t
           kept-new-versions 6
           kept-old-versions 2
           version-control t)       ; use versioned backups
   #+END_SRC
** Window move
   #+BEGIN_SRC emacs-lisp
     (use-package windmove
       :ensure t
       :config
       (windmove-default-keybindings 'super)
       (setq windmove-wrap-around t))
   #+END_SRC
** Notes
   #+BEGIN_SRC emacs-lisp
     (use-package deft
       :ensure t
       :bind ("<f8>" . deft)
       :commands (deft)
       :config (setq deft-directory "~/.emacs.d/notes"
                     deft-extensions '("md" "org" "txt")
                     deft-default-extension "org"))
   #+END_SRC
* Window Management
** switch window
   #+BEGIN_SRC emacs-lisp
     ;; switch window configuration
     (use-package switch-window
       :ensure t
       :bind ("C-x w" . switch-window))
   #+END_SRC
** Sessions
   #+BEGIN_SRC emacs-lisp
     (use-package eyebrowse
       :ensure t
       :init
       (eyebrowse-mode t))
   #+END_SRC
* Programming configurations
** customizations
   #+BEGIN_SRC emacs-lisp
     ;; electric indentation mode
     (electric-indent-mode 1)
   #+END_SRC
** Navigation
   #+BEGIN_SRC emacs-lisp
     (use-package smart-jump
       :ensure t
       :config
       (smart-jump-setup-default-registers))

     (smart-jump-register :modes '(c-mode c++-mode)
                          :jump-fn 'ggtags-find-tag-dwim
                          :pop-fn 'ggtags-prev-mark
                          :refs-fn 'ggtags-find-reference
                          :should-jump t
                          :heuristic 'point
                          :async 500
                          :order 2)

     (smart-jump-register :modes '(c-mode c++-mode)
                          :jump-fn 'rtags-find-symbol-at-point
                          :pop-fn 'rtags-location-stack-back
                          :refs-fn 'rtags-find-all-references-at-point
                          :should-jump (lambda ()
                                         (and
                                          (fboundp 'rtags-executable-find)
                                          (rtags-executable-find "rc")
                                          (rtags-is-indexed)))
                          :heuristic 'point
                          :async 500
                          :order 1)
   #+END_SRC
** Completions
   #+BEGIN_SRC emacs-lisp
     (use-package auto-complete
       :ensure t
       :pin melpa)
     (use-package auto-complete-c-headers
       :ensure t
       :config
       (ac-config-default))
     (use-package auto-complete-clang
       :ensure t
       :pin melpa)
   #+END_SRC
** Useful Modes
   #+BEGIN_SRC emacs-lisp
     (use-package yaml-mode
       :ensure t)
     (use-package gitignore-mode
       :ensure t)
     (use-package protobuf-mode
       :ensure t)
     (use-package groovy-mode
       :ensure t)
     (use-package cmake-mode
       :ensure t)
     (use-package markdown-mode
       :ensure t
       :commands (markdown-mode gfm-mode)
       :mode (("README\\.md\\'" . gfm-mode)
              ("\\.md\\'" . markdown-mode)
              ("\\.markdown\\'" . markdown-mode))
       :init (setq markdown-command "multimarkdown"))
   #+END_SRC
** Clang format
   #+BEGIN_SRC emacs-lisp
     ;; configure clang format
     (use-package clang-format
       :commands clang-format-mode
       :ensure t
       :init
       (setq clang-format-style-option "Google")
       :hook ((c++-mode-hook . clang-format-mode)
              (c-mode-hook . clang-format-mode))
       :bind (:map c-mode-map
              :map c++-mode-map
              ("C-c u" . clang-format-buffer)))
   #+END_SRC
** Expand region
   #+BEGIN_SRC emacs-lisp
     (use-package expand-region
       :ensure t
       :bind (("C-=" . er/expand-region)))
   #+END_SRC
