#+TITLE: settings
#+DATE: <2018-01-21 Sun>
#+AUTHOR: Sunil
#+EMAIL: sunhick@gmail.com
#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+OPTIONS: author:t c:nil creator:comment d:(not "LOGBOOK") date:t
#+OPTIONS: e:t email:nil f:t inline:t num:t p:nil pri:nil stat:t
#+OPTIONS: tags:t tasks:t tex:t timestamp:t toc:t todo:t |:t
#+CREATOR: Emacs 25.3.1 (Org mode 8.2.10)
#+DESCRIPTION: Emacs init.el alternative using org mode
#+EXCLUDE_TAGS: noexport
#+KEYWORDS: init.el org-mode settings emacs
#+LANGUAGE: en
#+SELECT_TAGS: export
#+STARTUP: showeverything

* Emacs configuration settings
*** File Header
    #+BEGIN_SRC emacs-lisp

      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      ;; 
      ;; settings.el - AUTO GENERATED FILE
      ;; 
      ;; Author : Sunil <sunhick@gmail.com>
      ;; Emacs customization file
      ;;
      ;; DO NOT EDIT THIS FILE. IF YOU WANT TO MODIFY
      ;; USE settings.org
      ;; 
      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    #+END_SRC
    
*** Visual tweaks
    #+BEGIN_SRC emacs-lisp
        ;; Get rid of tool bar and menu bar
        ;; (menu-bar-mode 0)
        ;; Yeah, I'm keeping the text menu at the top. It doesn't
        ;; bother me. Whereas the toolbar i never use it and just
        ;; occupies space.
        (tool-bar-mode 0)
        (scroll-bar-mode 0)

        ;; I hate typing. Especially when emacs prompts
        ;; me with yes/no and i type 'y' or 'n' in a hurry
        ;; remap yes/no to y/n
        (fset 'yes-or-no-p 'y-or-n-p)

        (custom-set-variables
       ;; custom-set-variables was added by Custom.
       ;; If you edit it by hand, you could mess it up, so be careful.
       ;; Your init file should contain only one such instance.
       ;; If there is more than one, they won't work right.
       '(custom-enabled-themes (quote (wombat)))
       '(inhibit-startup-screen t)
       '(package-selected-packages
         (quote
          (company-c-headers org-bullets org-bullets-mode clang-format magit iedit autopair which-key counsel-projectile counsel use-package))))
      (custom-set-faces
       ;; custom-set-faces was added by Custom.
       ;; If you edit it by hand, you could mess it up, so be careful.
       ;; Your init file should contain only one such instance.
       ;; If there is more than one, they won't work right.
       )

    #+END_SRC
    
*** Magit
    #+BEGIN_SRC emacs-lisp
      ;; 
      ;; configure and bind the keystroke for magit.
      ;; 
      (use-package magit
        :ensure t)
      (require 'magit-status)
      (global-set-key(kbd "C-x g") 'magit-status)

      ;; set the magit repository
      (setq magit-repository-directories '( "~/prv/github/"))

    #+END_SRC
    
*** Counsel & Swiper
    #+BEGIN_SRC emacs-lisp
      ;;
      ;; configure swipper for easy searching and navigations.
      ;; counsel is required for the C-x C-f to work. swiper
      ;; does install the counsel but need require line to
      ;; make it work.
      ;; 
      (use-package counsel
        :ensure t)
      (use-package swiper
        :ensure t)
      (use-package counsel-projectile
        :ensure t)
      (require 'counsel)
      (require 'swiper)
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (setq enable-recursive-minibuffers t)
      (global-set-key "\C-s" 'swiper)
      (global-set-key (kbd "C-c C-r") 'ivy-resume)
      (global-set-key (kbd "<f6>") 'ivy-resume)
      (global-set-key (kbd "M-x") 'counsel-M-x)
      (global-set-key (kbd "C-x C-f") 'counsel-find-file)
      (global-set-key (kbd "<f1> f") 'counsel-describe-function)
      (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
      (global-set-key (kbd "<f1> l") 'counsel-find-library)
      (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
      (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
      (global-set-key (kbd "C-c g") 'counsel-git)
      (global-set-key (kbd "C-c j") 'counsel-git-grep)
      (global-set-key (kbd "C-c k") 'counsel-ag)
      (global-set-key (kbd "C-x l") 'counsel-locate)
      (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
      (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)

      ;; configure projectile
      (projectile-mode)
      (setq projectile-completion-system 'ivy)

    #+END_SRC
    
*** Misc
    #+BEGIN_SRC emacs-lisp
      ;;
      ;; Easy navigations & typing.
      ;;

      ;; configure which key for help on key strokes
      (use-package which-key
        :ensure t)
      (require 'which-key)
      (which-key-mode)

      ;; enable auto pair mode to automatically insert closing parenthesis.
      (use-package autopair
        :ensure t)
      (require 'autopair)
      (autopair-global-mode 1)

      ;; Show matching parenthensis
      (show-paren-mode 1)

      ;; install iedit 
      (use-package iedit
        :ensure t)
      (require 'iedit)

      ;; Fix iedit bug in Mac
      (define-key global-map (kbd "C-c ;") 'iedit-mode)

      ;; Fixing another key binding bug in iedit mode
      (define-key global-map (kbd "C-c o") 'iedit-mode)

      ;; switch window configuration
      (use-package switch-window
        :ensure t)
      (global-set-key (kbd "C-x w") 'switch-window)


    #+END_SRC
    
*** Clang format
    #+BEGIN_SRC emacs-lisp
      ;; configure clang format
      (use-package clang-format
        :ensure t)
      (require 'clang-format)

      ;; (global-set-key (kbd "C-c i") 'clang-format-region)
      (global-set-key (kbd "C-c u") 'clang-format-buffer)
      (setq clang-format-style-option "Chromium")

    #+END_SRC
*** Back-up
    
    #+BEGIN_SRC emacs-lisp
      ;; configure emacs org mode
      (use-package org-bullets
        :ensure t)
      (require 'org-bullets)
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))

      ;; Backups at .saves folder in the current folder
      (setq backup-by-copying t      ; don't clobber symlinks
            backup-directory-alist
            '(("." . "~/.saves"))    
            delete-old-versions t
            kept-new-versions 6
            kept-old-versions 2
            version-control t)       ; use versioned backups

    #+END_SRC
*** Programming
    #+BEGIN_SRC emacs-lisp
      ;;
      ;; configuration for programming
      ;; 
      '(use-package yasnippet-snippets
         :ensure t)

      (use-package yasnippet
        :ensure t
        :pin melpa)
      (use-package yasnippet-snippets
        :ensure t
        :pin melpa)
      (require 'yasnippet)
      (yas-global-mode 1)

      ;; configure ggtags in c/c++/java mode for faster code navigations.
      (use-package ggtags
        :ensure t)
      (require 'ggtags)
      (add-hook 'c-mode-common-hook
                (lambda ()
                  (when (derived-mode-p 'c-mode 'python-mode 'c++-mode 'java-mode 'Objective-C)
                    (ggtags-mode 1))))
    #+END_SRC
    
*** Auto completion
    #+BEGIN_SRC emacs-lisp
      (use-package auto-complete
        :ensure t
        :pin melpa)
      (use-package auto-complete-c-headers
        :ensure t)
      (require 'auto-complete-config)
      (ac-config-default)

      ;; let's define a function which initializes auto-complete-c-headers and gets called for c/c++ hooks
      (defun my:ac-c-header-init ()
        (require 'auto-complete-c-headers)
        (add-to-list 'ac-sources 'ac-source-c-headers)
        (add-to-list 'achead:include-directories '"
        /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1
        /usr/local/include
        /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/9.0.0/include
        /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include
        /usr/include
        /System/Library/Frameworks
        /Library/Frameworks
        ")
        )

      ;; now let's call this function from c/c++ hooks
      (add-hook 'c++-mode-hook 'my:ac-c-header-init)
      (add-hook 'c-mode-hook 'my:ac-c-header-init)

      (use-package auto-complete-clang
        :ensure t
        :pin melpa)

      (require 'auto-complete-clang)
      (setq ac-auto-start nil)
      (setq ac-quick-help-delay 0.5)
      ;; (ac-set-trigger-key "TAB")
      ;; (define-key ac-mode-map  [(tab)] 'auto-complete)
      (define-key ac-mode-map  [(tab)] 'auto-complete)
      (defun my-ac-config ()
        (setq-default ac-sources '(ac-source-abbrev ac-source-dictionary ac-source-words-in-same-mode-buffers))
        (add-hook 'emacs-lisp-mode-hook 'ac-emacs-lisp-mode-setup)
        ;; (add-hook 'c-mode-common-hook 'ac-cc-mode-setup)
        (add-hook 'ruby-mode-hook 'ac-ruby-mode-setup)
        (add-hook 'css-mode-hook 'ac-css-mode-setup)
        (add-hook 'auto-complete-mode-hook 'ac-common-setup)
        (global-auto-complete-mode))
      (defun my-ac-cc-mode-setup ()
        (setq ac-sources (append '(ac-source-clang ac-source-yasnippet) ac-sources)))
      (add-hook 'c-mode-common-hook 'my-ac-cc-mode-setup)
      ;; ac-source-gtags
      (my-ac-config)

      (setq ac-clang-flags
            (mapcar (lambda (item)(concat "-I" item))
                    (split-string
                     "
               /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1
               /usr/local/include
               /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/9.0.0/include
               /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include
               /usr/include
               /System/Library/Frameworks
               /Library/Frameworks
                "
                     )))

      ;; open header files in cc mode
      (add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))

      ;; -i gets alias definitions from .bash_profile
      (setq shell-command-switch "-ic")

      ;; Don't make new frames when opening a new file with Emacs
      (setq ns-pop-up-frames nil)

      (use-package smooth-scrolling
        :ensure t)
      (smooth-scrolling-mode)

      ;; Support for Objective-C mode
      (use-package dummy-h-mode
        :ensure t)
      (require 'dummy-h-mode)
      (add-to-list 'auto-mode-alist '("\\.mm\\'" . objc-mode))

    #+END_SRC
    
*** Custom variables
    #+BEGIN_SRC emacs-lisp
      
    #+END_SRC
    
*** Neo tree
    #+BEGIN_SRC emacs-lisp
      ;; Enable neo tree view by default
      (use-package neotree
        :ensure t)
      (require 'neotree)
      (setq-default neo-theme 'plusminus)
      (neotree-toggle)
      ;; (setq neo-window-fixed-size nil)
      (setq neo-smart-open t)
      (setq neo-hidden-regexp-list '("^\\." "\\.cs\\.meta$" "\\.pyc$" "~$" "^#.*#$" "\\.elc$" "\\.o$"))
      (global-set-key [f8] 'neotree-toggle)
    #+END_SRC

*** Compile .emacs.d/
    
    Precompile all the *.el files for faster loading of emacs. But make sure *.elc files aren't stale. If you change *.el files in user directory
    be sure to run M-x byte-compile-init-dir. Emacs will prefer *.elc files over *.el files.

    #+BEGIN_SRC emacs-lisp
      (defun byte-compile-init-dir ()
        "Byte-compile all your dotfiles."
        (interactive)
        (byte-recompile-directory user-emacs-directory 0))

      ;; Don't call byte compile here. It will compile every single time emacs is loaded.
      ;; which defeats the purpose. call it only once.
      ;; (byte-compile-init-dir)
    #+END_SRC

*** Google C/C++ style 
    #+BEGIN_SRC emacs-lisp
      ;; Google C/C++ style
      (use-package google-c-style
        :ensure t)
      (require 'google-c-style)
      (add-hook 'c-mode-common-hook 'google-set-c-style)
      (add-hook 'c-mode-common-hook 'google-make-newline-indent)
    #+END_SRC
